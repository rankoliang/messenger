#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require('dotenv').config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require('../app');
const http = require('http');
const db = require('../db');
const onlineUsers = require('../onlineUsers');
const { User } = require('../db/models/index');
const jwt = require('jsonwebtoken');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require('socket.io')(server);

const authenticate = (token) => {
  return new Promise((resolve, reject) => {
    jwt.verify(token, process.env.SESSION_SECRET, (err, decoded) => {
      if (err) {
        return reject(err);
      }

      User.findOne({
        where: { id: decoded.id },
      })
        .then(resolve)
        .catch(reject);
    });
  });
};

io.use((socket, next) => {
  const { token } = socket.handshake.auth;

  if (!token) {
    // Not logged in
    socket.disconnect();
    return next(new Error('Not logged in'));
  }

  authenticate(token)
    .then((user) => {
      socket.user = user;
      return next();
    })
    .catch(() => {
      socket.disconnect();
      next(new Error('Authentication Error'));
    });
});

io.on('connection', (socket) => {
  socket.on('go-online', () => {
    let id;

    try {
      id = socket.user.id;
    } catch (error) {
      console.log(error);
      socket.disconnect();
      return;
    }

    onlineUsers.connect(id);

    // Each user joins a room with their own id
    socket.join(id);

    // send the user who just went online to everyone else who is already online
    socket.broadcast.emit('add-online-user', id);
  });

  socket.on('new-message', (data) => {
    try {
      if (data.message?.senderId === socket.user.id) {
        socket.to(data.recipientId).emit('new-message', {
          message: data.message,
          sender: data.sender,
        });
      }
    } catch (error) {
      console.log(error);
      socket.disconnect();
    }
  });

  socket.on('logout', () => {
    let id;

    try {
      id = socket.user.id;

      delete socket.user;
    } catch (error) {
      console.log(error);
      socket.disconnect();
      return;
    }

    onlineUsers.disconnect(id);

    if (!onlineUsers.has(id)) {
      socket.broadcast.emit('remove-offline-user', id);
    }
  });

  socket.on('read-sent-messages', ({ conversationId, otherUserId }) => {
    socket.to(otherUserId).emit('read-sent-messages', conversationId);
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

  console.log('Listening on ' + bind);
}
